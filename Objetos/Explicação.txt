Uma classe base instrumentada para tudo oque terá dentro de um objeto, desde métodos, propriedades e valores. Cada objeto irá seguir tudo o que foi construído dentro de sua classe, todo objeto é manipulável de forma independente. Para inicio, deve-se entender os métodos, como o constructor: chama automáticamente um outro objeto instânciado demtro de sua classe. 
O () do new fica vázio e sua função seria coligar (junto do nome da variável) com o () dentro da classe. Ao instanciar uma classe, não será passado parâmetros.
O () de constructor pode ser um parâmetro e no caso, segue o var de this. Fazendo o parâmetro de constructor, será obrigatório o seu uso em 'new Pessoa (nome)

EXBase 2
Criação de propriedades para cada objeto.
Para chamar qualquer objeto de uma vez, será construido o método 'info'.
Para melhorar mais o código, usar o "template string"(`${}`). O uso do Template String é mais moderno.
Possível usar metódos para obtenção das propriedades ex: getNome que irá retornar o nome do objeto. Possível retornar tudo com array #array.
Possivel também ''setar'' os objetos e classes com set (servirá para uma auteração em propriedades). Tudo isso é a orientação padrão e tradicional de JS.

Usando funções para criar objetos e Objetos Literais EX003 - Criação dinâmica

Substituir uma class por function - Seria o mais próximo de 'objetos literais'. Para classe, sempre será usado o método constructor para declarar oq for executado instânciado. Os paramentros pidade e pnome saem do constructor e vão para os () do Function Pessoa (pnome, pidade) e methods seguem a mesma lógica de base para arrow function (não se esquecer do this. em todos os methods). 

Objetos Literais - São diferentes dos convencionais, não existe mais independencia dos objetos, um objeto único referênciado na memória. Variáveis, propriedades, valores tudo irá indicar para o mesmo nome.